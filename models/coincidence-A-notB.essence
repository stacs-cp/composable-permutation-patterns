$ This of mesh patterns to avoid
given mesh_avoidance1 : set of (sequence(injective) of int, relation of (int * int))
given mesh_avoidance2 : set of (sequence(injective) of int, relation of (int * int))


$ The permutation we are searching for (1..length is the permutation)
given length : int
find perm : sequence (size length, injective) of int(1..length)


$ creating a padded version of perm, where position 0 contains the value 0 and position length+1 contains the value length+1
$ this is only used for mesh avoidance/containment
find permPadded : matrix indexed by [int(0..length+1)] of int(0..length+1)
such that permPadded[0] = 0, permPadded[length+1] = length+1
such that forAll i : int(1..length) . perm(i) = permPadded[i]

$ (mesh1 /\ !mesh2)
such that
    (
        $ pattern is the pattern, mesh is the mesh as a relation
        forAll (pattern, mesh) in mesh_avoidance1 .
        $ Build the inverse of 'pattern'. This is completely evaluated before solving.
        exists patterninv: matrix indexed by [int(0..|pattern|+1)] of int(0..|pattern|+1),
                    patterninv[0] = 0 /\ patterninv[|pattern|+1] = |pattern|+1 /\
                    (forAll i: int(1..|pattern|) . patterninv[pattern(i)] = i).
            $ Look for all places where the pattern can occur
            forAll ix : matrix indexed by [int(0..|pattern|+1)] of int(0..length+1),
                and([ ix[0]=0
                    , ix[|pattern|+1]=length+1
                    , forAll i : int(0..|pattern|) . ix[i] < ix[i+1]
                    , forAll n1, n2 : int(1..|pattern|) , n1 < n2 .
                        pattern(n1) < pattern(n2) <-> permPadded[ix[n1]] < permPadded[ix[n2]]
                    ]) .
                (
                    $ If we find the pattern, make sure there is at least one value in some cell of the mesh
                    exists (i,j) in mesh.
                        exists z: int(ix[i]+1..ix[i+1]-1). (permPadded[ix[patterninv[j]]] <= permPadded[z] /\ permPadded[z] <= permPadded[ix[patterninv[j+1]]])
                )
    ) /\
    !(
        $ pattern is the pattern, mesh is the mesh as a relation
        forAll (pattern, mesh) in mesh_avoidance2 .
        $ Build the inverse of 'pattern'. This is completely evaluated before solving.
        exists patterninv: matrix indexed by [int(0..|pattern|+1)] of int(0..|pattern|+1),
                    patterninv[0] = 0 /\ patterninv[|pattern|+1] = |pattern|+1 /\
                    (forAll i: int(1..|pattern|) . patterninv[pattern(i)] = i).
            $ Look for all places where the pattern can occur
            forAll ix : matrix indexed by [int(0..|pattern|+1)] of int(0..length+1),
                and([ ix[0]=0
                    , ix[|pattern|+1]=length+1
                    , forAll i : int(0..|pattern|) . ix[i] < ix[i+1]
                    , forAll n1, n2 : int(1..|pattern|) , n1 < n2 .
                        pattern(n1) < pattern(n2) <-> permPadded[ix[n1]] < permPadded[ix[n2]]
                    ]) .
                (
                    $ If we find the pattern, make sure there is at least one value in some cell of the mesh
                    exists (i,j) in mesh.
                        exists z: int(ix[i]+1..ix[i+1]-1). (permPadded[ix[patterninv[j]]] <= permPadded[z] /\ permPadded[z] <= permPadded[ix[patterninv[j+1]]])
                )
    )
